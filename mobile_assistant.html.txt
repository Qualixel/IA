<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Assistant Virtuel Vocal Mobile</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
            padding: 20px;
        }
        #chatbox {
            width: 100%;
            max-width: 600px;
            padding: 10px;
            border: 1px solid #ccc;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            border-radius: 10px;
        }
        #chat {
            height: 300px;
            overflow-y: auto;
            padding: 10px;
            border: 1px solid #ccc;
            margin-bottom: 10px;
            border-radius: 10px;
        }
        #input-area {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #input-area input {
            width: calc(100% - 22px);
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-bottom: 10px;
        }
        #input-area button {
            padding: 10px;
            border: 1px solid #ccc;
            background-color: #007bff;
            color: white;
            cursor: pointer;
            border-radius: 5px;
            margin: 5px;
        }
        #input-area #mic-button {
            background-color: #28a745;
        }
    </style>
</head>
<body>
    <div id="chatbox">
        <div id="chat"></div>
        <div id="input-area">
            <input type="text" id="user-input" placeholder="Tapez votre message ici...">
            <button onclick="sendMessage()">Envoyer</button>
            <button id="mic-button" onclick="startRecognition()">ðŸŽ¤</button>
        </div>
    </div>

    <script>
        const chat = document.getElementById('chat');
        const userInput = document.getElementById('user-input');

        function appendMessage(sender, message) {
            const messageElement = document.createElement('div');
            messageElement.textContent = `${sender}: ${message}`;
            chat.appendChild(messageElement);
            chat.scrollTop = chat.scrollHeight;
        }

        function sendMessage() {
            const message = userInput.value;
            if (message.trim()) {
                appendMessage('Vous', message);
                userInput.value = '';
                // Envoyer le message Ã  l'API ChatGPT et obtenir la rÃ©ponse
                getChatGPTResponse(message).then(response => {
                    appendMessage('Assistant', response);
                    speak(response);
                });
            }
        }

        async function getChatGPTResponse(prompt) {
            // Remplacez 'YOUR_API_KEY' par votre clÃ© API rÃ©elle
            const response = await fetch('https://api.openai.com/v1/engines/davinci-codex/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer YOUR_API_KEY`
                },
                body: JSON.stringify({
                    prompt: prompt,
                    max_tokens: 150
                })
            });
            const data = await response.json();
            return data.choices[0].text;
        }

        function speak(text) {
            const synth = window.speechSynthesis;
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'fr-FR';
            synth.speak(utterance);
        }

        function startRecognition() {
            const recognition = new webkitSpeechRecognition();
            recognition.lang = 'fr-FR';
            recognition.onresult = function(event) {
                const speechResult = event.results[0][0].transcript;
                userInput.value = speechResult;
                sendMessage();
            };
            recognition.start();
        }
    </script>
</body>
</html>